openapi: 3.0.0
info:
  title: MyTexty API Documentation
  description: A secure REST API for the MyTexty app suite
  version: 0.0.1
  contact:
    name: "Jack Considine"
    email: "jack@koptional.com"
servers:
  - url: https://mytexty.koptional.com/api

# 1) Define the key name and location
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  
  schemas:
    PaginationData:
      properties:
        current_page:
          type: integer
          format: int64
          minimum: 1
        first_page_url:
          type: string
        from:
          type: integer
          format: int64
          minimum: 1
        last_page:
          type: integer
          format: int64
          minimum: 1
        last_page_url:
          type: string
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
          format: int64
          minimum: 1
        prev_page_url:
          type: string
        to:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
    Contact:
      properties:
        id: 
          type: integer
          example: 32
          format: int64
        dob:
          type: string
          example: "01/20/1995"
        zip_code:
          type: string
          example: "78701"
        gender:
          type: string
          enum: ['male', 'female', 'other']
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        email:
          type: string
          example: "biggestFan@gmail.com"
        full_name:
          type: string
          example: "Arthur Lemur"
        phone_number:
          type: string
          example: "+18476448892"
        has_card:
          type: boolean
          example: true
        stripe_id:
          type: string
          example: cus_INYzkQuqeYvQWT
          
      required:
        - full_name
          phone_number
          email
          created_at
          updated_at
          has_card
          id
          stripe_customer_id
   
    influencer: 
      properties:
        id: 
          type: integer
          example: 3
          format: int64
        has_onboarded:
          type: boolean
          example: false
        name:
          type: string
          example: "Elon Musk"
        
        message_rule:
          type: string
          example: "everyone"
          enum: ["everyone", "subscribers"]
        
        gender:
          type: string
          example: "male"
          enum: ["male", "female"]
        
        email:
          type: string
          example: jack@koptional.com
        profession: 
          type: string
          example: College Counselor
        bio:
          type: string
          example: Hi, I’m Paul George. I will be your college counsellor. Neuro-linguistic programming is a pseudoscientific approach to communication, personal development, and psychotherapy created by Richard Bandler and John Grinder in United States in the 1970s
        dob:
          type: string
          example: "01/20/1995"
          description: "Format MM/DD/YYYY"
        
        zip:
          type: string
          example: "60091"
          description: "Format NNNNN"
        
        marital_status:
          type: string
          example: "Singled"

        personal_phone:
          type: string
          example: "+18476438892"
        twilio_phone_number:
          type: string
          example: "+18476438891"
        twilio_phone_id:
          type: string
          example: "sid_askdfjlkdsflkdsf"
        profile_image_url:
          type: string
          example: "https://via.placeholder.com/400x400"
      required: [email, id, name]
    Influencer-Request:
      required: [name]
      properties:
        has_onboarded:
          type: boolean
          example: false
          description: Whether this influencer has appropriately updated his profile 
        name: 
          type: string
          example: "Elon Musk"
        push_token:
          type: string
          example: dmYENnyg70jIlSRi7YSo4v:APA91bFQ0yXmSeS_BXGE8dXBgkQ2tcVlTqRTf8ozM_D4v_ARmzUeTLJtegIqTEU1Oq7cXoLjO_xYdhNWC11sPg2GQqGJb8qu7PSBp8DTY43LFZ6XClX837EDrIi-x-ZR2eEvJtZca9v7
        message_rule:
          type: string
          example: "everyone"
          enum: ["everyone", "subscribers"]
        
        gender:
          type: string
          example: "male"
          enum: ["male", "female", "other"]
        
        dob:
          type: string
          example: "01/20/1995"
          description: "Format MM/DD/YYYY"
        
        zip:
          type: string
          example: "60091"
          description: "Format NNNNN"
        
        marital_status:
          type: string
          example: "Singled"
          
        
        
        
        email:
          type: string
          example: jack@koptional.com
        profession: 
          type: string
          example: College Counselor
        bio:
          type: string
          example: Hi, I’m Paul George. I will be your college counsellor. Neuro-linguistic programming is a pseudoscientific approach to communication, personal development, and psychotherapy created by Richard Bandler and John Grinder in United States in the 1970s
        personal_phone:
          type: string
          example: "+18476438892"
        twilio_phone_number:
          type: string
          example: "+18476438891"
        twilio_phone_id:
          type: string
          example: "sid_askdfjlkdsflkdsf"
        profile_image_url:
          type: string
          example: "https://via.placeholder.com/400x400"

   
   
    Custom-Question:
      properties:
        id: 
          type: integer
          example: 32
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title: 
          example: College
          type: string
          
        question: 
          type: string
          example: What college are you studying in
        influencer_id:
          type: number
          format: int64
          example: 23
      required: [title, question, influencer_id, created_at, updated_at]
            
    Stripe-Plan:
      required: ["id", "price_id", "unit_amount", 'created_at', 'product', 'updated_at', 'type', 'stripe_product_id', 'nickname', 'currency', 'billing_scheme', 'active']
      properties:
        id:
          type: number
          format: int64
          example: 33
          
        price_id: 
          type: string
          example: "price_1Hl7AXGcPac2E5DndUfHl0KA"
          description: The stripe price id 
        created_at:
          type: string
          format: date
          example: "2020-11-17 02:20:47"
        updated_at:
          type: string
          format: date
          example: "2020-11-17 02:20:47"
        currency: 
          type: string
          enum: ['usd']
        nickname:
          type: string
          enum: [null]
          description: Ignore this nickname, use the product nickname
        unit_amount:
          type: number
          format: int64
          description: Monthly cost in cents
          example: 399
        stripe_product_id:
          type: number
          format: int64
          description: Internal, the foreign key to the product
          example: 9
        type: 
          type: string
          example: "recurring"
          enum: ["recurring"]
        product:
          type: object
          properties:
            id:
              type: number
              format: int64
              example: 9
            prod_id: 
              type: string
              example: 'prod_ILom0t1pZRtkBj'
            name:
              type: string
              example: 'Basic- 30'
            description: 
              type: string
              example: '30 Messages Per Month'
            messages:
              type: number
              format: int64
              example: 30
              description: The number of messages this plan offers. If absent, it's infinite
            active:
              type: boolean
              enum: [true]
            created_at:
              type: string
              format: date
              example: "2020-11-17 02:20:47"
            updated_at:
              type: string
              format: date
              example: "2020-11-17 02:20:47"
              
            
        product_id: 
          type: string
          example: "prod_IH8AlVWwXSGxTw"
        
   
        
        
        
          
        
    Message:
      required: [id, created_at, updated_at, contact_id, text, direction]
      properties:
        id: 
          type: integer
          example: 3
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        contact_id:
          type: number
          format: int64
          example: 1231
        text: 
          type: string
          example: "Howdy!"
        direction:
          type: string
          enum: ["to_influencer", "from_influencer"]
          example: "from_influencer"
    Chats:
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        influencer_id:
          type: number
          format: int64
          example: 233
        contact_id:
          type: number
          format: int64
          example: 123
        last_message:
          $ref: "#/components/schemas/Message"
      required: [influencer_id, contact_id, last_message, created_at, updated_at]
    
    Subscription:
      description: "This is a subscription of a contact to an influencer, with a specific plan selected. Note: currently you could technically subscribe to multiple plans of the same influencer"
      required: 
         - id
          contact_id
          stripe_price_id
          influencer_id
          influencer
      properties:
        id: 
          type: number
          format: int64
          example: 6
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        contact_id:
          type: number
          format: int64
          example: 7
        stripe_price_id:
          type: string
          example: price_1Hl7AXGcPac2E5DndUfHl0KA
          description: The price_id in Stripe that the contact subscribed to
        influencer_id:
          type: number
          format: int64
          example: 3
        influencer:
          $ref: "#/components/schemas/influencer"
    
    
    InfluencerContact: 
      
      description: This is a contact, but the server will return the contacts plan_id *relative to the influencer*. So we treat this schema differently than the contact endpoints
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          properties:
            plan_id: 
              type: string
              example: "plan_askdjfihasfdkhaskjd"
            questions:
              type: array
              items: 
                $ref: "#/components/schemas/Custom-Question"
            plan:
              $ref: '#/components/schemas/Stripe-Plan'
      required:
        - full_name
          phone_number
          plan_id
          email
          created_at
          updated_at
          id

    
    
    DashboardOverview:
      type: object
      properties:
        net_earnings:
          type: number
          format: int64
          description: The number of \*cents\* that this influencer has earned
          example: 5000000
        num_subscribers:
          type: number
          format: int64
          example: 200
        num_messages:
          type: number
          format: int64
          example: 200
        num_chats:
          type: number
          format: int64
          example: 200
  
    PaymentToInfluencer:
      description: The payments made from a contact to an influencer. Not necessarily a model but will be returned as an API 
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        stripe_id:
          type: string
          example: "asdufbkqiewhfasdfkln"
        plan_id: 
          type: string
          example: "plan_xzmvncbqiewladsf"
        contact:
          $ref: '#/components/schemas/InfluencerContact'
        amount_cents:
          example: 2500
          type: number
          format: int64
      required: [contact, amount_cents]
paths:

  /twilio-webhook/{influencer_id}:
    parameters:
        - in: path
          name: influencer_id
          schema:
            type: string
          required: true
          description: The ID of the influencer that has received a message. This is determined when the webhook is SET as the phone is initially allocated and the webhook created
    post:
      tags:
       - Webhooks
      summary: Receives webhook requests from Twilio as messages are received via SMS
      description: This will create the message on the backend and send a push notification to the influencer on file 
      responses:
        "200":
          description: "An empty affirmation that the message was recorded"
          content:
            text/plain:
              schema:
                type: string
                enum: ['']
            
  
  /influencers:
    get:
      tags:
       - Public
      responses:
          "200":
            description: "A paginated list of Influencers"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/influencer"
  /influencers/{influencerId}:
    parameters:
        - in: path
          name: influencerId
          schema:
            type: string
          required: true
          description: Id of the influencer who is being fetched
    get:
      tags:
       - Public
      responses:
          "200":
            description: "A paginated list of Influencers"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/influencer"
                        
  
  
  /influencers/{influencerId}/plans:
    get:
      tags:
        - Public 
      parameters:
        - in: path
          name: influencerId
          schema:
            type: string
          required: true
          description: Id of the influencer whose plans we're fetching
      responses:
          "200":
            description: "A paginated list of plans an influencer plan offerings"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/Stripe-Plan"
        
     
     
  /contacts/login:
    post:
      description: Authenticates a contact user
      summary: Authenticates a contact user
      tags:
        - Contact Authentication
      responses:
        "200":
            description: "The authenticated contact"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    user:
                      $ref: "#/components/schemas/Contact"
                    token:
                        type: string
                        description: "A JWT token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "401":
          description: "Invalid credentials"



  /contacts/signup:
    post: 
      description: Creates a new contact user account and authenticates as that user
      summary: Creates a new contact user account and authenticates as that user 
      tags:
        - Contact Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                  password
                  phone
                  name
              properties:
                email:
                  example: "contact@koptional.com"
                  type: string
                  description: the contact's email address
                name:
                  example: "Arthur Lemur"
                  type: string
                  description: the contact's full name
                password:
                  example: "testing123#"
                  type: string
                  description: The influencer's password
                phone: 
                  example: "+18476448892"
                  type: string
                  description: The influencer's phone number
      responses:
        "200":
            description: "The authenticated contact"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    user:
                      $ref: "#/components/schemas/Contact"
                    token:
                        type: string
                        description: "A JWT token"
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                        
                  
  /contact/me:
    get:
      security:
        - bearerAuth: []
      description: Returns the contact account of the authenticated user
      summary:  Returns the contact account of the authenticated user
      tags:
        - Contact Authentication
      responses:
        "200":
            description: "The authenticated contact"
            content:
              application/json:
                schema:
                  $ref:  "#/components/schemas/Contact"
                
        "401":
          description: "No authenticated contact"
  
  /contact/stripe-checkout-session:
    post:
      security:
        - bearerAuth: []
      description: Creates a Stripe session from the contact which will be necessary to capture their payment credentials
      summary:  Creates a Stripe session from the contact which will be necessary to capture their payment credentials
      tags:
        - Contact Billing
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - success_url
                  cancel_url
              properties:
                success_url:
                  type: string
                  example: "http://localhost:8101/payment-success"
                  description: The URL stripe should redirect to when payment information was successfully captured. It will include a sessionId parameter!
                cancel_url:
                  type: string
                  example: "http://localhost:8101/home"
                  description: The URL stripe should redirect to when payment information was not captured. Ideally, this will be the last page the contact was visiting 
                  
                
      
      responses:
        "200":
            description: "The authenticated contact"
            content:
              application/json:
                schema:
                  properties:
                    session_id:
                      type: string
                      example: "cs_test_c13A2ER1ic5Ns7I8Ogonfo3H197dyG0XjvXxFjnrxSqMe6Zrm92IIxd8ms"
                      
  /contact/stripe-payment-method:
    put:
      security:
        - bearerAuth: []
      description: Sets the payment method on a customer, using the sessionId in the URL returned by stripe 
      summary:  Sets the payment method on a customer, using the sessionId in the URL returned by stripe 
      tags:
        - Contact Billing
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
              properties:
                
                session_id:
                  type: string
                  example: "cs_test_c13A2ER1ic5Ns7I8Ogonfo3H197dyG0XjvXxFjnrxSqMe6Zrm92IIxd8ms"
                  description: The sessionId returned in the URL after Stripe captures the user's payment method. It will look like `{successUrl}/?sessionId=x`
                  
                
      
      responses:
        "200":
          description: A success message indicating the payment method has been set 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
  
  /contact/subscriptions:
    
    get:
      security:
        - bearerAuth: []
      tags: 
        - Contact Subscriptions
      description: Returns a list of the influencers this contact currently subscribes to, possibly along wiht some subscription information
      summary: Returns a list of the influencers this contact currently subscribes to
      
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Subscription"
    
    post:
      security:
        - bearerAuth: []
      tags:
        - Contact Subscriptions
      description: Subscribes to a plan (requires payment info to be attached to the contact)
      summary: Subscribes to a plan (requires payment info to be attached to the contact)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stripe_price_id
                  influencer_id
              properties:
                stripe_price_id:
                  type: string
                  example: "price_1Hl7AXGcPac2E5DndUfHl0KA"
                  description: The Stripe-price ID for the product that the user is subscribing to
                influencer_id:
                  type: number
                  example: 3
                  description: The ID of the influencer for whom we're signing up
      responses:
        "400":
          description: "No payment information"
        "200":
          description: "user profile + token"
          content:
            application/json:
             schema:
              $ref: "#/components/schemas/Subscription"
                                

    delete:
      security:
        - bearerAuth: []
      tags:
        - Contact Subscriptions
      description: Unsubscribes from this influencers plan 
      summary: Unsubscribes from this influencers plan  (Must be subscribed to the plan in the first place)
      responses:
        "400":
          description: "Not subscribed to this influencer"
        "200":
          description: "user profile + token"
          content:
            application/json:
             schema:
              type: object
              properties:
                success:
                  type: boolean
                  enum: [true]

  
  /influencers/signup: 
    post:
      tags:
        - Influencer Authentication
      summary: Signs up an influencer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                  password
                  phone
                  name
              properties:
                email:
                  type: string
                  description: the influencers's email address
                  example: "jack@koptional.com"
                password:
                  type: string
                  description: The influencer's password
                phone: 
                  type: string
                  description: The influencer's phone number
                  example: "8472125602"
                name:
                  type: string
                  description: The influencer's full name
                  example: "James VIdale"
      responses:
        "200":
          description: "A signup token with the influencer"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: the 
                  influencer:
                    $ref: "#/components/schemas/influencer"
                  
  

  /influencers/login:
    post:
      tags: 
        - Influencer Authentication
      summary: Authenticates User 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                  title
                  url
              properties:
                email:
                  type: string
                  description: the user's email address
                password:
                  type: string
                  description: The user's password
     
          
      responses:
        "401":
          description: "Invalid credentials"
        "200":
          description: "user profile + token"
          content:
            application/json:
             schema:
              type: object
              properties:
                token:
                  type: string
                  description: the 
                influencer:
                  $ref: "#/components/schemas/influencer"

  /logout:
    post:
      tags: 
        - Logging Out - Any User
      summary: Logs a user out
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
  
  /influencer/available-phones:
    parameters:
      - in: query
        name: count
        required: false
        description: "An optional count for how many available phones to pull. Defaults to 10"
        schema:
          type: number
      - in: query
        name: area_code
        required: false
        example: "847"
        description: "An optional 3 digit number to search area codes by"
        schema:
          type: number
    get:
      tags:
        - Phone Allocation
      summary: Lists phone numbers that are available to be allocated to the influencer
      description: Lists phone numbers that are available to be allocated to the influencer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    friendly_name:
                      type: string
                      example: "(847) 719-6508"
                      description: The standarad readable format for a phone number
                    number:
                      type: string
                      example:  "+18477196508"
                      description: "The standard machine format for a phone number"
                  
      
  
  # Token authentication
  /influencer/profile:
    get:
      tags: 
        - Profile
      summary: Returns the auth user's profile 
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/influencer"
    patch: 
      tags: 
        - Profile
      summary: Updates the auth user's profile 
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Influencer-Request"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/influencer"

  /influencer/custom-questions:
    get:
      tags:
        - Custom Questions
      summary: Returns the custom questions associated with this influencer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                 properties:
                   data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Custom-Question" 
    post:
      tags:
        - Custom Questions
      summary: Returns the custom questions associated with this influencer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                  title
                  url
              properties:
                title:
                  type: string
                  example: "College"
                question:
                  type: string
                  example: "What college are you studying in?"
      
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Custom-Question"
     
  /influencer/custom-questions/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Id of the custom question 
    delete:
      tags:
        - Custom Questions
      summary: Deletes this custom question from the influencer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    enum: [true]
    put:
      tags:
        - Custom Questions
      summary: Returns the custom questions associated with this influencer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                  title
                  url
              properties:
                title:
                  type: string
                  example: "College"
                question:
                  type: string
                  example: "What college are you studying in?"
      
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Custom-Question"
                
                
                
                
                
  /available-sms-plans:
    get:
      tags: 
        - Available SMS Plans
      summary: Returns the global SMS plans that have been defined by the administrators
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                 properties:
                   data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Stripe-Plan"
    
  /influencer/sms-plans:
    get:
      tags: 
        - Influencer SMS Plans
      summary: Returns the influencer's subscription plans they have added to their account
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                 properties:
                   data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Stripe-Plan"
   

    put:
      tags: 
        - Influencer SMS Plans
      summary: Sets (overwrites) all plans that the influencer is offering
      description: Sets (overwrites) all plans that the influencer is offering
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                plans:
                  type: array
                  items:
                    example: ['price_1Hl795GcPac2E5DnesEJdKKt', 'price_1Hl795GcPac2E5DnesEJdKKt']
                    description: List of *price* ids that the influencer will offer
                    items:
                      type: string
                      description: A single plan id
             
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
   
  /influencer/chats:
    get:
      tags: 
        - Chats
      summary: Returns a list of chats that an influencer has started 
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                 properties:
                   data:
                    type: array
                    items:
                      allOf: 
                        - $ref: "#/components/schemas/Chats"
                        - type: object
                          properties:
                            contact:
                              $ref: "#/components/schemas/InfluencerContact"
                        
  
  /influencer/mass-message:
    post:
      tags: 
        - Influencer Messaging
      summary: Sends a text message to each subscriber individually
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  example: "Hello Subscribers!"
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  
  /influencer/chats/{contactId}/messages:
    
    parameters:
      - in: path
        name: contactId
        schema:
          type: string
        required: true
        description: the ID of the contact that is being messaged
    get:
      tags:
        - Influencer Messaging
      description: Fetches the messages from this chat
      summary: Fetches the messages from this chat
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                type:
                  object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                      
    post:
      tags:
        - Influencer Messaging
      description: Sends a message to a chat
      summary: Sends a message to a chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  example: "Howdy!"
      responses:
          "200":
            description: "Success"
            content: 
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
  /influencer/contacts:
                      
    get:
      description: Returns a list of the influencer's contacts
      
      tags:
        - Influencer contacts
      summary: Returns a list of the influencer's contacts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                type:
                  object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                      - $ref: '#/components/schemas/InfluencerContact'
  /influencer/contacts/{contactId}:
    parameters:
        - in: path
          name: contactId
          schema:
            type: integer
          required: true
          description: Id of the custom question 
    get:
      description: Returns a list of the influencer's contacts
      
      tags:
        - Influencer contacts
      summary: Returns a list of the influencer's contacts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InfluencerContact'
                  - type: object
                    properties:
                      questions:
                        type: array
                        items:  
                          $ref: '#/components/schemas/Custom-Question'
 
  
  /influencer/dashboard/overview:
    get:
      description: Returns the overview stats of this influencer's dashboard
      summary: Returns the overview stats of this influencer's dashboard
      security:
        - bearerAuth: []
      tags:
        - Dashboard
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardOverview'
                      
           
  /influencer/dashboard/payments:
    get:
      description: Returns the payment list of this influencer's dashboard
      summary: Returns the payment list of this influencer's dashboard
      security:
        - bearerAuth: []
      tags:
        - Dashboard
      responses:
        "200":
          description: "Success"
          content: 
            application/json:
              schema:
                type:
                  object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentToInfluencer'
           
     